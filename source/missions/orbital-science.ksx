@ksx import ("lib/telemetry").
@ksx from ("lib/util") import (set_global_runmode, update_runmode).

set_global_runmode.

local i to 0.
until false {

    if runmode = 0 {
        if ship:status = "PRELAUNCH" and ship:verticalspeed < 0.01 {
            print "Launching countdown initiated:".
            FROM {local i is 5.} UNTIL i = 0 STEP {set i to i-1.} DO {
                print "T - " + i.
                wait 1.
            }

            lock throttle to 1.
            lock steering to heading(90, 90).

            stage. 
            wait 0.2.
        }

        if ship:verticalspeed > 100 and ship:altitude > 600 {
            print "Starting gravity turn".
            set runmode to 1.
            update_runmode(runmode).
        }
    } else if runmode = 1 {
        local target_apoapsis to 72000.

        // x_ is current altitude as percentage of target apoapsis
        local x_ to min(max(ship:apoapsis / target_apoapsis, 0), 1).
        // Derivative of ascent which looks like x^(s(x-1))
        // Found through manual searching with desmos calculator
        //local ascent_parameter to 0.3.
        //local ascent_derivative to -ascent_parameter * x_^(-ascent_parameter * x_ + ascent_parameter - 1) * (x_ * ln(x_) + x_ - 1).

        // Simple quadratic polynomial ascent path
        local ascent_derivative to 2 * (-1) * x_ + 1.82.

        local pitch_angle to min(max(arctan2(ascent_derivative, 1), 0), 90).
        set steering to heading(90, pitch_angle).

        if (ship:apoapsis > 71000) or (ship:verticalspeed < -10) {
            lock steering to ship:prograde.
            lock throttle to 0.

            print "Waiting to circulize orbit".
            set runmode to 2.
            update_runmode(runmode).
        }
    } else if runmode = 2 {

        // TODO

    } else if runmode = 3 {
        local experiments to ship:modulesnamed("ModuleScienceExperiment").
        local experiment_running to false.
        for ex in experiments {
            if (not ex:hasdata) and (not ex:deployed) and (not ex:inoperable) {
                print "Running '" + ex:part:title + "'...".
                ex:deploy.

                set experiment_running to true.
            }

            if ex:hasdata {
                print "Finished '" + ex:part:title + "'".
            }
        }

        if not experiment_running or ship:altitude < 60000 or ship:verticalspeed < -10 {
            print "Done with science, preparing to reenter".

            set runmode to 4.
            update_runmode(runmode).

            // Remove boosters
            stage.

            lock steering to ship:retrograde.
        }
    } else if runmode = 4 {

        if (ship:altitude < 50000) {
            // Prep parachutes
            stage.

            print "Coasting to ground".
            set runmode to 5.
            update_runmode(runmode).
        }
    } else if runmode = 5 {}

    if MOD(i, 4) {
        // At most every second to prevent it from taking up too much time
        log_ship_telemetry.
        set i to 0.
    }

    ON RCS {
        set runmode to runmode + 1.
    }

    ON ABORT {
        print "Aborting!!".

        stage.
        wait 1.

        stage.
        wait 1.

        stage.
        wait 1.

        lock steering to ship:retrograde.
        lock thrust to 0.

        set runmode to 4.
        update_runmode(runmode).
    }

    wait 0.04.
    set i to i + 1.
}
