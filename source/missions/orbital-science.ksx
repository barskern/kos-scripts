@ksx import ("lib/telemetry").
@ksx from ("lib/util") import (set_global_runmode, update_runmode).
@ksx from ("lib/geopos") import (dms_to_deg).
@ksx from ("lib/transfer") import (deltav_to_circulize, estimate_burn_time).
@ksx from ("lib/throttle") import (throttle_for_twr).
@ksx from ("lib/electric") import (total_ship_ec).
@ksx from ("lib/gravity_turn") import (gravity_turn_pitch).

set_global_runmode.

local LAUNCH to 0.
local VERTICAL_ASCENT to 1.
local GRAVITY_TURN to 2.
local WAIT_CIRCULIZE to 3.
local CIRCULIZE_BURN to 4.
local PERFORM_ORBIT to 5.
local COLLECT_SCIENCE to 6.
local REENTER_ATMO to 7.
local COAST_TO_GROUND to 8.

local vertical_ascent_altitude to 600.
local vertical_ascent_speed to 80.
local target_twr to 1.7.
local target_apoapsis to 72000.
local semimajoraxis_extra to 4000.

ON RCS {
    update_runmode(runmode + 1).
    print "Manually toggled runmode to " + runmode.
    return true.
}

ON ABORT {
    print "ABORTING!!".

    lock steering to ship:retrograde.
    lock throttle to 0.

    wait 0.1.

    until ship:stagenum = 0 {
        stage.
        wait 1.
    }

    update_runmode(99).
    return true.
}

local telemetry_toggle to 0.
until false {

    local ship_ec to total_ship_ec().

    if runmode = LAUNCH {

        print "Launching countdown initiated:".
        FROM {local i is 5.} UNTIL i = 0 STEP {set i to i-1.} DO {
            print "T - " + i.
            wait 1.
        }

        lock throttle to throttle_for_twr(target_twr).
        lock steering to heading(90, 90).

        until ship:maxthrust > 0 {
            stage. 
            wait 0.1.
        }

        print "LAUNCH!!".

        wait 0.2.

        update_runmode(runmode + 1).

    } else if runmode = VERTICAL_ASCENT {
        if ship:verticalspeed > vertical_ascent_speed and ship:altitude > vertical_ascent_altitude {
            update_runmode(runmode + 1).
        }

        if ship:verticalspeed < -10 {
            print "Falling during vertical ascent, aborting!".
            update_runmode(REENTER_ATMO).
        }
    } else if runmode = GRAVITY_TURN {

        if (
            not (defined locked_gravity_turn_steering)
            or not (defined gravity_throttle) 
            or not (defined gravity_throttle_pid)
        ){
            print "Starting gravity turn".

            lock gravity_turn_steering to (
                heading(90, gravity_turn_pitch(target_apoapsis, vertical_ascent_altitude))
            ).

            lock steering to gravity_turn_steering.
            global locked_gravity_turn_steering to true.

            // We are above worst atmosphere, lets speed up a bit
            global gravity_throttle_pid to pidloop(0.01, 0.006, 0.01, 0, 1).
            set gravity_throttle_pid:setpoint to 30.

            set gravity_throttle to throttle_for_twr(target_twr). 
            lock throttle to gravity_throttle.
        }

        if ship:altitude > 68000 {
            set gravity_turn_steering to heading(90, 0).
        }

        if ship:altitude < 50000 {
            set gravity_throttle to throttle_for_twr(target_twr).
        } else if 50000 < ship:altitude and ship:altitude < target_apoapsis {
            // Far enough through that atmosphere that we begin to focus on eta to apo, limited to 2.2 g
            set gravity_throttle to min(gravity_throttle_pid:update(time:seconds, ship:orbit:eta:apoapsis), throttle_for_twr(2.4)).

            // Linear equation for increasing setpoint
            local slope to (90 - 40) / (target_apoapsis - 50000).
            set gravity_throttle_pid:setpoint to slope * (ship:altitude - 50000) + 30.
        } 

        if vang(ship:facing:vector, gravity_turn_steering:vector) > 30 {
            print "Instability! Waiting for correct orientation..".
            set gravity_throttle to 0.1.
        }

        if ship:verticalspeed < -10.0 {
            print "Falling while performing gravity turn, aborting!".
            update_runmode(REENTER_ATMO).
        }

        if ship:apoapsis > target_apoapsis + 1400 {
            lock steering to ship:prograde.
            lock throttle to 0.

            update_runmode(runmode + 1).
        }
    } else if runmode = WAIT_CIRCULIZE {
        if not (defined burn_time_to_circulize) {
            local deltav to deltav_to_circulize().
            global burn_time_to_circulize to estimate_burn_time(deltav).

            print "Waiting to circulize orbit using " + round(deltav,1) + "dv (est. burn time " + round(burn_time_to_circulize,1) + "s)".
        }

        if ship:verticalspeed < -10 {
            print "Falling while waiting for space, aborting!".
            update_runmode(REENTER_ATMO).
        }

        if ship:orbit:eta:apoapsis < (burn_time_to_circulize / 2) {
            update_runmode(runmode + 1).
        }
    } else if runmode = CIRCULIZE_BURN {

        if not (defined circulize_pid) or not (defined circulize_throttle) {
            print "Starting circulization burn!".

            global circulize_pid to pidloop(0.0001, 0.001, 0.001, 0, 1).
            set circulize_pid:setpoint to target_apoapsis + ship:body:radius.

            global circulize_throttle to 0.

            lock throttle to circulize_throttle.
            lock steering to heading(90, 0).
        }

        // When we pass apoapsis we have to be careful when circulizing that 
        // we don't get apoapsis infront of us and increase without a limit. Hence
        // we swap to use semimajoraxis which will naturally limit it.
        if ship:orbit:eta:apoapsis <= ship:orbit:eta:periapsis {
            set circulize_throttle to circulize_pid:update(time:seconds, ship:orbit:periapsis + ship:body:radius).
        } else {
            set circulize_throttle to circulize_pid:update(time:seconds, ship:orbit:semimajoraxis).
        }

        if (ship:verticalspeed < -40 and ship:altitude < 60000) {
            print "Falling while circulizing burn, aborting!".
            update_runmode(REENTER_ATMO).
        }

        if (
            (ship:orbit:apoapsis > target_apoapsis and ship:orbit:periapsis > target_apoapsis) 
            or (ship:orbit:semimajoraxis > target_apoapsis + semimajoraxis_extra + ship:body:radius)
        ) {
            print "Circulized orbit!".

            lock steering to ship:prograde.
            lock throttle to 0.

            update_runmode(runmode + 1).
        }
    } else if runmode = PERFORM_ORBIT {
        // KSC Longitude
        local target_long to dms_to_deg(-74, 34, 31) - 60.

        lock steering to ship:north.

        // Longer wait times to consume less electricity??.
        wait 20.

        if ship:altitude < 60000 or ship_ec < 40 {
            print "Went too far down or have too little EC".
            update_runmode(runmode + 1).
        }

        if abs(ship:longitude - target_long) < 3 {
            print "Got to target longitude, collecting science and reentering!".
            update_runmode(runmode + 1).
        }
    } else if runmode = COLLECT_SCIENCE {
        local experiments to ship:modulesnamed("ModuleScienceExperiment").
        local experiment_running to false.
        for ex in experiments {
            if (not ex:hasdata) and (not ex:deployed) and (not ex:inoperable) {
                print "Running '" + ex:part:title + "'...".
                ex:deploy.

                set experiment_running to true.
            }

            if ex:hasdata {
                print "Finished '" + ex:part:title + "'".
            }
        }

        if not experiment_running or ship:altitude < 58000 {
            print "Done with science".
            update_runmode(runmode + 1).
        }
    } else if runmode = REENTER_ATMO {
        if not (defined descent_steering) or not (defined descent_throttle) {
            print "Reentering atmosphere".

            global descent_steering to ship:retrograde.
            lock steering to descent_steering.

            global descent_throttle to 0.
            lock throttle to descent_throttle.
        }

        if vang(ship:facing:vector, descent_steering:vector) < 5 {
            set descent_throttle to throttle_for_twr(1).
        } else {
            set descent_throttle to 0.
        }

        if ship:deltav:vacuum < 1 or ship:altitude < 50000 {
            print "No more fuel or too low altitude, staging and coasting the rest".
            set descent_throttle to 0.
            wait 0.01.

            until ship:stagenum <= 0 {
                stage.
                wait 0.1.
            }

            update_runmode(runmode + 1).
        }
    } else if runmode = COAST_TO_GROUND {
        if not chutessafe {
            chutessafe on.
        }

        if chutes {
            print "All chutes out, waiting for impact".
            update_runmode(runmode + 1).
        }
    }

    if telemetry_toggle = 0 {
        log_ship_telemetry.
    }

    if ship_ec < 10 {
        print "Running out of power, let's start reentry no matter what!".
        update_runmode(REENTER_ATMO).
    }

    set telemetry_toggle to MOD(telemetry_toggle + 1, 8).
    wait 0.01.
}
